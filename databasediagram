Here are the MySQL queries to create the database schema for the **CampusConnect** website:

### 1. Create the Database
```sql
CREATE DATABASE campusconnect;
USE campusconnect;
```

---

### 2. Create `Users` Table
```sql
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    profile_image VARCHAR(255),
    bio TEXT,
    birthdate DATE,
    gender ENUM('Male', 'Female') NOT NULL;
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

-- To add the new columns queries:-
-- ALTER TABLE Users
-- ADD COLUMN birthdate DATE,
-- ADD COLUMN gender ENUM('Male', 'Female') NOT NULL;

---

### 3. Create `Communities` Table
```sql
CREATE TABLE communities (
    community_id INT AUTO_INCREMENT PRIMARY KEY,
    community_name VARCHAR(255) NOT NULL,
    description TEXT,
    profile_image VARCHAR(255),
    created_by INT NOT NULL,
    requirement_status ENUM('open', 'closed') DEFAULT 'open',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES Users(user_id)
);
```

---

### 4. Create `Community_Members` Table
```sql
CREATE TABLE community_members (
    membership_id INT AUTO_INCREMENT PRIMARY KEY,
    community_id INT NOT NULL,
    user_id INT NOT NULL,
    role ENUM('admin', 'member') NOT NULL,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (community_id) REFERENCES Communities(community_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
);
```

---

### 5. Create `Events` Table
```sql
CREATE TABLE events (
    event_id INT AUTO_INCREMENT PRIMARY KEY,
    community_id INT NOT NULL,
    event_name VARCHAR(255) NOT NULL,
    description TEXT,
    start_date DATETIME NOT NULL,
    end_date DATETIME NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (community_id) REFERENCES Communities(community_id) ON DELETE CASCADE
);
```

---

### 6. Create `Announcements` Table
```sql
CREATE TABLE announcements (
    announcement_id INT AUTO_INCREMENT PRIMARY KEY,
    community_id INT NOT NULL,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (community_id) REFERENCES Communities(community_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
);
``


Alter TABLE communities ADD community_type varchar(50);
ALTER TABLE communities change requirement_status recruitment_status enum('open','closed');`

---

### Relationships Recap
1. **`Users` ↔ `Communities`:**
   - A user can create a community (`created_by` in `Communities` references `Users`).
   
2. **`Users` ↔ `Community_Members`:**
   - Users can join multiple communities with roles as admin or member.

3. **`Communities` ↔ `Community_Members`:**
   - Communities have many users.

4. **`Communities` ↔ `Events`:**
   - Communities host events.

5. **`Communities` ↔ `Announcements`:**
   - Communities have announcements made by users.

---

Let me know if you'd like additional queries, such as **insert**, **select**, or **join** examples!